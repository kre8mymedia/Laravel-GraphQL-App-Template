"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")


# Queries
type Query {
    # users: [User!]! @paginate(defaultCount: 10)
    users: [User!]! @all
    user(id: ID @eq): User @find
    # POSTS
    posts: [Post!]! @all
    post(id: Int! @eq): Post @find
    # BOOKS
    books: [Book] @all
    book(id: Int! @eq): Book @find
    booksByFeatured(featured: Boolean! @eq): [Book] @all
    # CATEGORIES
    categories: [Category] @all
    category(id: Int! @eq): Category @find
}

# Mutations
type Mutation {
  """ 
  USER Mutations
  """
  createUser(
    name: String! @rules(apply: ["required", "min:4"]),
    email: String! @rules(apply: ["required", "email", "unique: users, email"]),
    password: String! @rules(apply: ["min:4"]) @bcrypt
  ): User! @create

  updateUser(
   id: ID! @rules(apply: ["required"])
   name: String
   email: String @rules(apply: ["email"])
  ): User! @update

  deleteUser(
   id: ID! @rules(apply: ["required"])
  ): User! @delete

  """ 
  CATEGORY Mutations
  """
  createCategory(
    name: String @rules(apply: ["required", "unique:categories,name"])
  ): Category @create

  updateCategory(
   id: ID! @rules(apply: ["required"])
   name: String! @rules(apply: ["required", "unique:categories,name"])
  ): Category @update

  deleteCategory(
   id: ID! @rules(apply: ["required"])
  ): Category @delete

  """ 
  BOOK Mutations
  """
  createBook(
    category: Int! @rename(attribute: "category_id")
    title: String! @rules(apply: ["required"])
    author: String! @rules(apply: ["required"])
    link: String
    description: String
    featured: Boolean
  ): Book @create

  updateBook(
    id: ID! @rules(apply: ["required"])
    category: Int! @rename(attribute: "category_id")
    title: String! @rules(apply: ["required"])
    author: String! @rules(apply: ["required"])
    link: String
    description: String
    featured: Boolean
  ): Book @update

  deleteBook(
   id: ID! @rules(apply: ["required"])
  ): Book @delete

}

# Models
type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User! @belongsTo
  comments: [Comment!]! @hasMany
}

type Comment {
  id: ID!
  reply: String!
  post: Post! @belongsTo
}

type Category {
  id: ID!
  name: String!
  books: [Book] @hasMany
  created_at: DateTime!
}

type Book {
  id: ID!
  title: String!
  author: String!
  link: String
  description: String
  featured: Boolean
  category: Category! @belongsTo
}